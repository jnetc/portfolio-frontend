import { useEffect } from 'react';
import { NextPage, GetStaticProps } from 'next';

import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { groq } from 'next-sanity';
// import { usePreviewSubscription, urlFor } from '../lib/sanity';
// import { getClient } from '../lib/sanity.server';
import { useStore } from '@Hooks/useStore';

// Components
import Navigation from '@Navigation';

interface Type {
  en: string | Array<string>;
  ru: string | Array<string>;
}

export interface MainType {
  action_btn: Type;
  second_btn: Type;
  navigation: Type;
  slogan: Type;
}

const Home: NextPage<{ data: MainType }> = ({ data }) => {
  const { lang } = useStore();

  // console.log(data.action_btn, lang);
  useEffect(() => {
    // console.log(window.navigator);
  }, []);

  const transform = (lang: string, arr: Type) => {
    const toArray = Object.entries(arr);

    for (const [key, value] of toArray) {
      if (lang === key) {
        return value;
      }
    }
    return;
  };

  // console.log('tran__ ', transform(lang, data.action_btn));

  return (
    <div className={styles.container}>
      <Head>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <title>Create Next App </title>
      </Head>

      <Navigation />
      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to üòÉ{transform(lang, data.action_btn)}
          <button>üòç{transform(lang, data.second_btn)}</button>
        </h1>
      </main>
    </div>
  );
};

// Query value
const query = groq`*[_type == 'main'] {
  navigation,
  slogan,
  action_btn,
  second_btn

}`;

export const getStaticProps: GetStaticProps = async ({ preview = false }) => {
  // const [data] = await getClient(preview).fetch(query);
  console.log(preview, query);

  return {
    props: {
      data: {
        action_btn: {
          en: 'Hire me',
          ru: '–ù–∞–π–¥–∏ –º–µ–Ω—è',
        },
        second_btn: {
          en: 'My works',
          ru: '–ú–æ–∏ —Ä–∞–±–æ—Ç—ã',
        },
      },
    },
  };
};

export default Home;
